# -*- coding: utf-8 -*-
"""A Simple Ride-Sharing System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G--_dxsPOr4hlkWtKzF1LxYMF_95dCC0
"""

class Location():
  def __init__(self, x, y):
    self.x = x
    self.y = y

  def __str__(self):
    return f'({self.x},{self.y})'

class Car():
  def __init__(self, car_name, location, cost_per_mile):
    self.car_name = car_name
    self.location = location
    self.cost_per_mile = cost_per_mile

  def __str__(self):
    return f'[{self.car_name}, {self.location}, {self.cost_per_mile}]'

  def move_to(self, new_x, new_y):
    self.location = Location(new_x, new_y)

class Passenger():
  def __init__(self,passenger_name,location):
    self.passenger_name = passenger_name
    self.location = location
  def __str__(self):
    return f'({self.passenger_name}, {self.location})'

  def move_to(self, new_x, new_y):
    self.location = Location(new_x, new_y)

import math
class RideSharingApp():
  def __init__(self):
    self.cars = []
    self.passenger = []

  def add_car(self,car):
    self.cars.append(car)

  def add_passenger(self, passenger):
    self.passenger.append(passenger)

  def remove_car(self,car):
    self.cars.remove(car)

  def remove_passenger(self,passenger):
    self.passenger.remove(passenger)

  def find_cheapest_car(self):
    if not self.cars:
      return None

    min_cost_per_mile = float('inf') #Largest value
    cheapest_car= None

    for car in self.cars:
      if car.cost_per_mile < min_cost_per_mile:
        min_cost_per_mile = car.cost_per_mile
        cheapest_car = car

    print(f'Cheapest car: {cheapest_car.car_name}, Cost per mile: {cheapest_car.cost_per_mile}')

  def find_nearest_car(self, passenger):
    nearest_car = None
    min_distance = float('inf')
    for car in self.cars:
      distance = math.sqrt((passenger.location.x - car.location.x)** 2 + (passenger.location.y - car.location.y) ** 2)
      if distance < min_distance:
        min_distance = distance
        nearest_car = car
    print(f'Nearest car for {passenger.passenger_name}: {nearest_car.car_name}, Distance: {round(min_distance, 2)}')

if __name__ == "__main__":
  app = RideSharingApp()

  car1= Car("car1", Location(2,1), (0.61))
  car2 = Car("car2", Location(-4,1), (0.5))
  passenger1 = Passenger("passenger1", Location(-2,3))
  passenger2 = Passenger("passenger2", Location(0,0))

  app.add_car(car1)
  app.add_car(car2)
  app.add_passenger(passenger1)
  app.add_passenger(passenger2)

  app.find_cheapest_car()
  app.find_nearest_car(passenger1)
  app.find_nearest_car(passenger2)